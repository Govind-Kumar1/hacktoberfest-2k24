def divide_with_precision(dividend, divisor, precision=2):
    # Handle division by zero
    if divisor == 0:
        return "Division by zero is undefined"
    
    # Determine the sign of the result
    sign = -1 if (dividend < 0) ^ (divisor < 0) else 1
    
    # Work with positive values for easier calculation
    dividend, divisor = abs(dividend), abs(divisor)
    
    # Initialize quotient
    quotient = 0
    factor = 10 ** precision  # Factor to shift decimals

    # Perform the division using bit manipulation for the integer part
    while dividend >= divisor:
        temp, multiple = divisor, 1
        
        # Double the divisor until it exceeds dividend
        while dividend >= (temp << 1):
            temp <<= 1
            multiple <<= 1
        
        # Subtract the largest multiple of divisor from dividend
        dividend -= temp
        quotient += multiple

    # Now handle the fractional part by multiplying dividend by 10^precision
    dividend *= factor
    
    # Perform division for the fractional part
    fractional_part = 0
    while dividend >= divisor:
        temp, multiple = divisor, 1
        
        # Double the divisor until it exceeds dividend
        while dividend >= (temp << 1):
            temp <<= 1
            multiple <<= 1
        
        # Subtract the largest multiple of divisor from dividend
        dividend -= temp
        fractional_part += multiple
    
    # Combine integer and fractional parts
    result = quotient + fractional_part / factor
    
    # Apply the sign to the result
    return sign * result

# Example Usage
dividend = 25
divisor = 3
result = divide_with_precision(dividend, divisor, precision=2)
print(f"{dividend} / {divisor} = {result:.2f}")
